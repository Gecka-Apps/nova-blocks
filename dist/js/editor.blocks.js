!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=67)}([function(e,t,n){e.exports={default:n(72),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(74),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,o.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t,n){"use strict";t.__esModule=!0;var r=n(48),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,o.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=n(96),i=r(o),l=n(100),a=r(l),c=n(48),u=r(c);t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,u.default)(t)));e.prototype=(0,a.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i.default?(0,i.default)(e,t):e.__proto__=t)}},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(34)("wks"),o=n(26),i=n(6).Symbol,l="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=l&&i[e]||(l?i:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";n.d(t,"e",function(){return l}),n.d(t,"g",function(){return a}),n.d(t,"h",function(){return c}),n.d(t,"a",function(){return u}),n.d(t,"b",function(){return s}),n.d(t,"c",function(){return p}),n.d(t,"d",function(){return f}),n.d(t,"f",function(){return m}),n.d(t,"i",function(){return d});var r=wp.components,o=r.SVG,i=r.Path,l=(wp.element.createElement("svg",{width:"36",height:"36",viewBox:"0 0 36 36",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M0 18C0 8.05888 8.05888 0 18 0C27.9411 0 36 8.05888 36 18C36 27.9411 27.9411 36 18 36C8.05888 36 0 27.9411 0 18ZM12.0398 14C12.4069 10.626 15.2652 8 18.7368 8H20.4211C24.6068 8 28 11.3932 28 15.5789V16.381C28 20.3809 24.9177 23.6609 20.9987 23.9753C20.9996 23.9324 21 23.8893 21 23.8462V21.2727C21 17.2561 17.7439 14 13.7273 14H12.0398Z",fill:"#6565F2"}),wp.element.createElement("path",{d:"M8 21.2857C8 18.9188 9.91878 17 12.2857 17H13.4545C15.9649 17 18 19.0351 18 21.5455V23.1538C18 25.278 16.278 27 14.1538 27H13.7143C10.5584 27 8 24.4416 8 21.2857Z",fill:"#FFE42E"})),wp.element.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"24",height:"24"},wp.element.createElement("rect",{width:"24",height:"24",rx:"12",fill:"#6565F2"})),wp.element.createElement("g",{mask:"url(#mask0)"},wp.element.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0ZM4 8.49123C4 6.01079 7.01619 4 10.7368 4H11.619C16.2477 4 20 6.50152 20 9.5873C20 12.3926 16.5888 14.6667 12.381 14.6667H11.5789C7.39321 14.6667 4 12.4045 4 9.61403V8.49123Z",fill:"#6565F2"}),wp.element.createElement("path",{d:"M7 18.7143C7 19.4244 7.57563 20 8.28571 20H15.5C16.3284 20 17 19.3284 17 18.5V18.5C17 17.6716 16.3284 17 15.5 17H8.71429C7.76751 17 7 17.7675 7 18.7143V18.7143Z",fill:"#FFE42E"})))),a=wp.element.createElement("svg",{width:"36",height:"36",viewBox:"0 0 36 36",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("mask",{id:"path-1-outside-1",maskUnits:"userSpaceOnUse",x:"-2",y:"-2",width:"40",height:"40",fill:"black"},wp.element.createElement("rect",{fill:"white",x:"-2",y:"-2",width:"40",height:"40"}),wp.element.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M18 0C8.05888 0 0 8.05888 0 18C0 27.9411 8.05888 36 18 36C27.9411 36 36 27.9411 36 18C36 8.05888 27.9411 0 18 0ZM23.4737 25C20.4507 25 18 22.5493 18 19.5263V18.8095C18 15.0487 21.0487 12 24.8095 12C28.2284 12 31 14.7716 31 18.1905V18.8421C31 22.243 28.243 25 24.8421 25H23.4737Z"})),wp.element.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M18 0C8.05888 0 0 8.05888 0 18C0 27.9411 8.05888 36 18 36C27.9411 36 36 27.9411 36 18C36 8.05888 27.9411 0 18 0ZM23.4737 25C20.4507 25 18 22.5493 18 19.5263V18.8095C18 15.0487 21.0487 12 24.8095 12C28.2284 12 31 14.7716 31 18.1905V18.8421C31 22.243 28.243 25 24.8421 25H23.4737Z",fill:"#6565F2"}),wp.element.createElement("path",{d:"M2 18C2 9.16344 9.16344 2 18 2V-2C6.95431 -2 -2 6.95431 -2 18H2ZM18 34C9.16344 34 2 26.8366 2 18H-2C-2 29.0457 6.95431 38 18 38V34ZM34 18C34 26.8366 26.8366 34 18 34V38C29.0457 38 38 29.0457 38 18H34ZM18 2C26.8366 2 34 9.16344 34 18H38C38 6.95431 29.0457 -2 18 -2V2ZM16 19.5263C16 23.6539 19.3461 27 23.4737 27V23C21.5552 23 20 21.4448 20 19.5263H16ZM16 18.8095V19.5263H20V18.8095H16ZM24.8095 10C19.9442 10 16 13.9442 16 18.8095H20C20 16.1533 22.1533 14 24.8095 14V10ZM33 18.1905C33 13.667 29.333 10 24.8095 10V14C27.1239 14 29 15.8761 29 18.1905H33ZM33 18.8421V18.1905H29V18.8421H33ZM24.8421 27C29.3476 27 33 23.3476 33 18.8421H29C29 21.1384 27.1384 23 24.8421 23V27ZM23.4737 27H24.8421V23H23.4737V27Z",fill:"white",mask:"url(#path-1-outside-1)"}),wp.element.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M12 30C8.68629 30 6 27.3137 6 24V14C6 9.58172 9.58172 6 14 6H16C18.728 6 20.9458 8.18475 20.999 10.9C18.0388 12.3471 16 15.3878 16 18.9048V19.8421C16 22.9484 17.9786 25.5925 20.7443 26.5829C20.0821 28.5685 18.2082 30 16 30H12Z",fill:"#FFE42E"})),c=wp.element.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"24",height:"24"},wp.element.createElement("rect",{width:"24",height:"24",rx:"12",fill:"#6565F2"})),wp.element.createElement("g",{mask:"url(#mask0)"},wp.element.createElement("path",{d:"M0 12C0 5.37258 5.37258 0 12 0V0C18.6274 0 24 5.37258 24 12V12C24 18.6274 18.6274 24 12 24V24C5.37258 24 0 18.6274 0 12V12Z",fill:"#6565F2"}),wp.element.createElement("path",{d:"M17.3982 8.99283C17.8831 9.39282 17.8831 10.1358 17.3982 10.5357L14.9673 12.5407C14.315 13.0787 13.331 12.6147 13.331 11.7692V7.75933C13.331 6.91386 14.315 6.44992 14.9673 6.98788L17.3982 8.99283Z",fill:"white"}),wp.element.createElement("path",{d:"M6.60184 8.99283C6.11689 9.39282 6.11689 10.1358 6.60184 10.5357L9.03272 12.5407C9.68496 13.0787 10.669 12.6147 10.669 11.7692V7.75933C10.669 6.91386 9.68496 6.44992 9.03272 6.98788L6.60184 8.99283Z",fill:"white"}),wp.element.createElement("path",{d:"M7 18.2751C7 18.8033 7.42818 19.2314 7.95637 19.2314H8.2172C8.7774 19.2314 9.23154 18.7773 9.23154 18.2171V17.8582C9.23154 17.3842 8.84727 16.9999 8.37325 16.9999H8.27517C7.57091 16.9999 7 17.5708 7 18.2751V18.2751Z",fill:"#FFE42E"}),wp.element.createElement("path",{d:"M10.7192 18.2751C10.7192 18.8033 11.1474 19.2314 11.6756 19.2314H11.9364C12.4966 19.2314 12.9508 18.7773 12.9508 18.2171V17.8582C12.9508 17.3842 12.5665 16.9999 12.0925 16.9999H11.9944C11.2901 16.9999 10.7192 17.5708 10.7192 18.2751V18.2751Z",fill:"#FFE42E"}),wp.element.createElement("path",{d:"M14.4385 18.2751C14.4385 18.8033 14.8667 19.2314 15.3948 19.2314H15.6557C16.2159 19.2314 16.67 18.7773 16.67 18.2171V17.8582C16.67 17.3842 16.2857 16.9999 15.8117 16.9999H15.7136C15.0094 16.9999 14.4385 17.5708 14.4385 18.2751V18.2751Z",fill:"#FFE42E"}))),u=wp.element.createElement(o,{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24"},wp.element.createElement(i,{fill:"none",d:"M0 0h24v24H0V0z"}),wp.element.createElement(i,{d:"M16 13h-3V3h-2v10H8l4 4 4-4zM4 19v2h16v-2H4z"})),s=wp.element.createElement(o,{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24"},wp.element.createElement(i,{fill:"none",d:"M0 0h24v24H0V0z"}),wp.element.createElement(i,{d:"M8 19h3v4h2v-4h3l-4-4-4 4zm8-14h-3V1h-2v4H8l4 4 4-4zM4 11v2h16v-2H4z"})),p=wp.element.createElement(o,{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24"},wp.element.createElement(i,{fill:"none",d:"M0 0h24v24H0V0z"}),wp.element.createElement(i,{d:"M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z"})),f=wp.element.createElement("svg",{width:"20",height:"20",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("path",{d:"M15.54 5.54L13.77 7.3L12 5.54L10.23 7.3L8.46 5.54L12 2L15.54 5.54ZM18.46 15.54L16.7 13.77L18.46 12L16.7 10.23L18.46 8.46L22 12L18.46 15.54ZM8.46 18.46L10.23 16.7L12 18.46L13.77 16.7L15.54 18.46L12 22L8.46 18.46ZM5.54 8.46L7.3 10.23L5.54 12L7.3 13.77L5.54 15.54L2 12L5.54 8.46Z",fill:"currentColor"}),wp.element.createElement("path",{d:"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z",fill:"currentColor"})),m=wp.element.createElement("svg",{width:"20",height:"20",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("path",{d:"M20 15.3099L23.31 11.9999L20 8.68994V3.99994H15.31L12 0.689941L8.69 3.99994H4V8.68994L0.690002 11.9999L4 15.3099V19.9999H8.69L12 23.3099L15.31 19.9999H20V15.3099ZM12 17.9999V5.99994C15.31 5.99994 18 8.68994 18 11.9999C18 15.3099 15.31 17.9999 12 17.9999Z",fill:"currentColor"})),d=wp.element.createElement("svg",{width:"20",height:"20",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},wp.element.createElement("path",{d:"M18 2L20 6H18L16 2H13L15 6H13L11 2H10C9.46957 2 8.96086 2.21071 8.58579 2.58579C8.21071 2.96086 8 3.46957 8 4V14C8 14.5304 8.21071 15.0391 8.58579 15.4142C8.96086 15.7893 9.46957 16 10 16H20C20.5304 16 21.0391 15.7893 21.4142 15.4142C21.7893 15.0391 22 14.5304 22 14V2H18ZM20 14H10V4.4L11.8 8H20V14Z",fill:"currentColor"}),wp.element.createElement("path",{d:"M14 20H4V10H7V8H4C3.46957 8 2.96086 8.21071 2.58579 8.58579C2.21071 8.96086 2 9.46957 2 10V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H14C14.5304 22 15.0391 21.7893 15.4142 21.4142C15.7893 21.0391 16 20.5304 16 20V17H14V20Z",fill:"currentColor"}),wp.element.createElement("path",{d:"M5 19H13L11.41 17H9.24L8.4 18.1L7 16.3L5 19Z",fill:"currentColor"}))},function(e,t,n){var r=n(6),o=n(5),i=n(21),l=n(16),a=n(15),c=function(e,t,n){var u,s,p,f=e&c.F,m=e&c.G,d=e&c.S,h=e&c.P,v=e&c.B,g=e&c.W,_=m?o:o[t]||(o[t]={}),w=_.prototype,y=m?r:d?r[t]:(r[t]||{}).prototype;m&&(n=t);for(u in n)(s=!f&&y&&void 0!==y[u])&&a(_,u)||(p=s?y[u]:n[u],_[u]=m&&"function"!=typeof y[u]?n[u]:v&&s?i(p,r):g&&y[u]==p?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(p):h&&"function"==typeof p?i(Function.call,p):p,h&&((_.virtual||(_.virtual={}))[u]=p,e&c.R&&w&&!w[u]&&l(w,u,p)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(14);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(17)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";t.__esModule=!0;var r=n(103),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=o.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){var r=n(10),o=n(47),i=n(36),l=Object.defineProperty;t.f=n(11)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return l(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(13),o=n(28);e.exports=n(11)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(53),o=n(32);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(32);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=!0},function(e,t,n){var r=n(27);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports={}},function(e,t,n){var r=n(52),o=n(39);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){"use strict";var r=n(107),o=n(111),i=n(112),l=n(128),a=n(65),c=n(133);n.d(t,"a",function(){return a.a}),n.d(t,"b",function(){return l.a}),n.d(t,"d",function(){return i.b}),n.d(t,"c",function(){return i.a}),n.d(t,"e",function(){return c.a}),n.d(t,"f",function(){return r.a}),n.d(t,"g",function(){return o.a}),n.d(t,"h",function(){return c.b})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(13).f,o=n(15),i=n(7)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(e,t){var n=null;return function(){var r=this,o=arguments,i=function(){e.apply(r,o)};clearTimeout(n),n=setTimeout(i,t)}}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(34)("keys"),o=n(26);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(5),o=n(6),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(20)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(14),o=n(6).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(14);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(10),o=n(81),i=n(39),l=n(33)("IE_PROTO"),a=function(){},c=function(){var e,t=n(35)("iframe"),r=i.length;for(t.style.display="none",n(55).appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[l]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){t.f=n(7)},function(e,t,n){var r=n(6),o=n(5),i=n(20),l=n(40),a=n(13).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:l.f(e)})}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){e.exports={default:n(113),__esModule:!0}},function(e,t,n){"use strict";function r(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=o(t),this.reject=o(n)}var o=n(27);e.exports.f=function(e){return new r(e)}},function(e,t,n){var r=n(15),o=n(19),i=n(33)("IE_PROTO"),l=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r=n(9),o=n(5),i=n(17);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],l={};l[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",l)}},function(e,t,n){e.exports=!n(11)&&!n(17)(function(){return 7!=Object.defineProperty(n(35)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var o=n(77),i=r(o),l=n(87),a=r(l),c="function"==typeof a.default&&"symbol"==typeof i.default?function(e){return typeof e}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":typeof e};t.default="function"==typeof a.default&&"symbol"===c(i.default)?function(e){return void 0===e?"undefined":c(e)}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":void 0===e?"undefined":c(e)}},function(e,t,n){"use strict";var r=n(79)(!0);n(50)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(20),o=n(9),i=n(51),l=n(16),a=n(22),c=n(80),u=n(29),s=n(45),p=n(7)("iterator"),f=!([].keys&&"next"in[].keys()),m=function(){return this};e.exports=function(e,t,n,d,h,v,g){c(n,t,d);var _,w,y,b=function(e){if(!f&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",C="values"==h,E=!1,k=e.prototype,M=k[p]||k["@@iterator"]||h&&k[h],S=M||b(h),O=h?C?b("entries"):S:void 0,H="Array"==t?k.entries||M:M;if(H&&(y=s(H.call(new e)))!==Object.prototype&&y.next&&(u(y,x,!0),r||"function"==typeof y[p]||l(y,p,m)),C&&M&&"values"!==M.name&&(E=!0,S=function(){return M.call(this)}),r&&!g||!f&&!E&&k[p]||l(k,p,S),a[t]=S,a[x]=m,h)if(_={values:C?S:b("values"),keys:v?S:b("keys"),entries:O},g)for(w in _)w in k||i(k,w,_[w]);else o(o.P+o.F*(f||E),t,_);return _}},function(e,t,n){e.exports=n(16)},function(e,t,n){var r=n(15),o=n(18),i=n(82)(!1),l=n(33)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),c=0,u=[];for(n in a)n!=l&&r(a,n)&&u.push(n);for(;t.length>c;)r(a,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(24);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(6).document;e.exports=r&&r.documentElement},function(e,t,n){n(84);for(var r=n(6),o=n(16),i=n(22),l=n(7)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<a.length;c++){var u=a[c],s=r[u],p=s&&s.prototype;p&&!p[l]&&o(p,l,u),i[u]=i.Array}},function(e,t,n){var r=n(52),o=n(39).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(30),o=n(28),i=n(18),l=n(36),a=n(15),c=n(47),u=Object.getOwnPropertyDescriptor;t.f=n(11)?u:function(e,t){if(e=i(e),t=l(t,!0),c)try{return u(e,t)}catch(e){}if(a(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t){},function(e,t,n){var r=n(24),o=n(7)("toStringTag"),i="Arguments"==r(function(){return arguments}()),l=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=l(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(10),o=n(27),i=n(7)("species");e.exports=function(e,t){var n,l=r(e).constructor;return void 0===l||void 0==(n=r(l)[i])?t:o(n)}},function(e,t,n){var r,o,i,l=n(21),a=n(120),c=n(55),u=n(35),s=n(6),p=s.process,f=s.setImmediate,m=s.clearImmediate,d=s.MessageChannel,h=s.Dispatch,v=0,g={},_=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},w=function(e){_.call(e.data)};f&&m||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++v]=function(){a("function"==typeof e?e:Function(e),t)},r(v),v},m=function(e){delete g[e]},"process"==n(24)(p)?r=function(e){p.nextTick(l(_,e,1))}:h&&h.now?r=function(e){h.now(l(_,e,1))}:d?(o=new d,i=o.port2,o.port1.onmessage=w,r=l(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",w,!1)):r="onreadystatechange"in u("script")?function(e){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),_.call(e)}}:function(e){setTimeout(l(_,e,1),0)}),e.exports={set:f,clear:m}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(10),o=n(14),i=n(44);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";n.d(t,"a",function(){return M});var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(8),d=n(130),h=(n.n(d),n(131)),v=n(132),g=wp.i18n.__,_=wp.element,w=_.Component,y=_.Fragment,b=wp.components,x=b.Dropdown,C=b.IconButton,E=b.PanelRow,k=b.Toolbar,M=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this;return wp.element.createElement(k,{className:"pixelgrade-hero-block-toolbar"},wp.element.createElement(x,{position:"bottom",className:"pixelgrade-hero-block-toolbar-dropdown",contentClassName:"components-nova--popover",renderToggle:function(e){var t=e.isOpen,n=e.onToggle;return wp.element.createElement(C,{onClick:n,icon:m.d,"aria-expanded":t,label:g("Content Alignment","__plugin_txtd"),labelPosition:"bottom"})},focusOnMount:!1,renderContent:function(t){t.onClose;return wp.element.createElement(y,null,wp.element.createElement(S,e.props))}}))}}]),t}(w),S=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.applyMinimumHeightBlock,r=t.horizontalAlignment,o=t.verticalAlignment,i=e.setAttributes;return wp.element.createElement(y,null,wp.element.createElement(E,null,wp.element.createElement("span",null,g("Horizontal","__plugin_txtd")),wp.element.createElement(h.a,{value:r,onChange:function(e){wp.data.select("core/block-editor").getSelectedBlock().innerBlocks.map(function(t){wp.data.dispatch("core/block-editor").updateBlockAttributes(t.clientId,{align:e})}),i({horizontalAlignment:e})}})),n&&wp.element.createElement(E,null,wp.element.createElement("span",null,g("Vertical","__plugin_txtd")),wp.element.createElement(v.a,{value:o,onChange:function(e){return i({verticalAlignment:e})}})))}}]),t}(w)},function(e,t,n){"use strict";var r=n(12),o=n.n(r),i=n(0),l=n.n(i),a=n(1),c=n.n(a),u=n(2),s=n.n(u),p=n(3),f=n.n(p),m=n(4),d=n.n(m),h=wp.element.Component,v=function(e){return function(t){function n(){c()(this,n);var e=f()(this,(n.__proto__||l()(n)).apply(this,arguments));return e.state={windowWidth:window.innerWidth,windowHeight:window.innerHeight,progress:.5},e.updateHandler=e.updateDimensions.bind(e),e}return d()(n,t),s()(n,[{key:"componentDidMount",value:function(){var e=document.getElementsByClassName("edit-post-layout__content")[0];window.addEventListener("resize",this.updateHandler),e.addEventListener("scroll",this.updateHandler),this.updateDimensions()}},{key:"componentWillUnmount",value:function(){var e=document.getElementsByClassName("edit-post-layout__content")[0];window.removeEventListener("resize",this.updateHandler),e.removeEventListener("scroll",this.updateHandler)}},{key:"updateDimensions",value:function(){var e=document.getElementsByClassName("edit-post-layout__content")[0],t=this.container.getBoundingClientRect(),n=(this.state.windowHeight-t.y)/(this.state.windowHeight+this.container.offsetHeight),r=Math.max(Math.min(n,1),0);this.setState({windowWidth:window.innerWidth,windowHeight:window.innerHeight,scrollTop:e.scrollTop,progress:r,dimensions:{width:this.container.offsetWidth,height:this.container.offsetHeight,top:t.y}})}},{key:"getParallaxStyles",value:function(){var e=this.props.attributes,t=e.enableParallax,n=e.parallaxAmount,r=e.parallaxCustomAmount;if(!t)return{};var o="custom"===n?r:parseInt(n,10);o=Math.max(Math.min(1,o/100),0);var i=this.state,l=i.dimensions,a=i.windowHeight,c=i.progress,u=l.height*(1-o)+a*o,s=u/l.height,p=l.height*(1-s)/2;return{height:u,transition:"none",transform:"translate(0,"+((a+l.height)*(c-.5)*o+p)+"px)"}}},{key:"render",value:function(){var t=this;return wp.element.createElement("div",{className:"nova-mask",ref:function(e){return t.container=e}},this.state.dimensions&&wp.element.createElement(e,o()({},this.props,{style:this.getParallaxStyles()})))}}]),n}(h)};t.a=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(68),o=(n.n(r),n(69));n.n(o),n(70),n(137),n(148)},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(8),o=n(71),i=wp.i18n.__,l=wp.blocks.registerBlockType,a=wp.blockEditor.InnerBlocks;l("novablocks/hero",{title:i("Hero of the Galaxy","__plugin_txtd"),description:i("A great way to get your visitors acquainted with your content.","__plugin_txtd"),category:"nova-blocks",icon:r.e,edit:o.a,save:function(){return wp.element.createElement(a.Content,null)},getEditWrapperProps:function(){return wp.data.select("core/block-editor").getSettings().alignWide?{"data-align":"full"}:{}}})},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(12),d=n.n(m),h=n(31),v=n(25),g=n(134),_=n(136),w=(wp.i18n.__,wp.blockEditor.InspectorControls),y=wp.element,b=y.Component,x=y.Fragment,C=wp.data.select("core/block-editor"),E=function(e){var t=C.getBlocks();t.filter(function(e){return"novablocks/hero"===e.name}).filter(function(n,r){var o=d()({},n.attributes,e),i=o.applyMinimumHeight,l=o.scrollIndicator,a="first"===i&&0===r||"all"===i,c=!0===l&&0===r,u=t.findIndex(function(e){return n===e});return wp.data.dispatch("core/block-editor").updateBlockAttributes(n.clientId,{blockIndex:u,applyMinimumHeightBlock:a,scrollIndicatorBlock:c}),!0})},k=C.getBlocks(),M=Object(h.a)(function(){var e=C.getBlocks(),t=k.length!==e.length;t||(t=k.some(function(t,n){return k[n].clientId!==e[n].clientId})),t&&(k=e,E())},30);wp.data.subscribe(M);var S=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){return[wp.element.createElement(x,null,wp.element.createElement(g.a,this.props),wp.element.createElement(_.a,this.props)),wp.element.createElement(w,null,wp.element.createElement(v.f,this.props),wp.element.createElement(v.e,this.props),wp.element.createElement(v.h,this.props),wp.element.createElement(v.g,this.props))]}}]),t}(b);t.a=S},function(e,t,n){n(73),e.exports=n(5).Object.getPrototypeOf},function(e,t,n){var r=n(19),o=n(45);n(46)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){e.exports={default:n(75),__esModule:!0}},function(e,t,n){n(76);var r=n(5).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){var r=n(9);r(r.S+r.F*!n(11),"Object",{defineProperty:n(13).f})},function(e,t,n){e.exports={default:n(78),__esModule:!0}},function(e,t,n){n(49),n(56),e.exports=n(40).f("iterator")},function(e,t,n){var r=n(37),o=n(32);e.exports=function(e){return function(t,n){var i,l,a=String(o(t)),c=r(n),u=a.length;return c<0||c>=u?e?"":void 0:(i=a.charCodeAt(c),i<55296||i>56319||c+1===u||(l=a.charCodeAt(c+1))<56320||l>57343?e?a.charAt(c):i:e?a.slice(c,c+2):l-56320+(i-55296<<10)+65536)}}},function(e,t,n){"use strict";var r=n(38),o=n(28),i=n(29),l={};n(16)(l,n(7)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(l,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(13),o=n(10),i=n(23);e.exports=n(11)?Object.defineProperties:function(e,t){o(e);for(var n,l=i(t),a=l.length,c=0;a>c;)r.f(e,n=l[c++],t[n]);return e}},function(e,t,n){var r=n(18),o=n(54),i=n(83);e.exports=function(e){return function(t,n,l){var a,c=r(t),u=o(c.length),s=i(l,u);if(e&&n!=n){for(;u>s;)if((a=c[s++])!=a)return!0}else for(;u>s;s++)if((e||s in c)&&c[s]===n)return e||s||0;return!e&&-1}}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){return e=r(e),e<0?o(e+t,0):i(e,t)}},function(e,t,n){"use strict";var r=n(85),o=n(86),i=n(22),l=n(18);e.exports=n(50)(Array,"Array",function(e,t){this._t=l(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,n):"values"==t?o(0,e[n]):o(0,[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){e.exports={default:n(88),__esModule:!0}},function(e,t,n){n(89),n(59),n(94),n(95),e.exports=n(5).Symbol},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(11),l=n(9),a=n(51),c=n(90).KEY,u=n(17),s=n(34),p=n(29),f=n(26),m=n(7),d=n(40),h=n(41),v=n(91),g=n(92),_=n(10),w=n(14),y=n(19),b=n(18),x=n(36),C=n(28),E=n(38),k=n(93),M=n(58),S=n(42),O=n(13),H=n(23),P=M.f,I=O.f,A=k.f,L=r.Symbol,B=r.JSON,j=B&&B.stringify,N=m("_hidden"),F=m("toPrimitive"),T={}.propertyIsEnumerable,V=s("symbol-registry"),R=s("symbols"),z=s("op-symbols"),W=Object.prototype,Z="function"==typeof L&&!!S.f,D=r.QObject,G=!D||!D.prototype||!D.prototype.findChild,U=i&&u(function(){return 7!=E(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=P(W,t);r&&delete W[t],I(e,t,n),r&&e!==W&&I(W,t,r)}:I,q=function(e){var t=R[e]=E(L.prototype);return t._k=e,t},J=Z&&"symbol"==typeof L.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof L},Y=function(e,t,n){return e===W&&Y(z,t,n),_(e),t=x(t,!0),_(n),o(R,t)?(n.enumerable?(o(e,N)&&e[N][t]&&(e[N][t]=!1),n=E(n,{enumerable:C(0,!1)})):(o(e,N)||I(e,N,C(1,{})),e[N][t]=!0),U(e,t,n)):I(e,t,n)},K=function(e,t){_(e);for(var n,r=v(t=b(t)),o=0,i=r.length;i>o;)Y(e,n=r[o++],t[n]);return e},Q=function(e,t){return void 0===t?E(e):K(E(e),t)},X=function(e){var t=T.call(this,e=x(e,!0));return!(this===W&&o(R,e)&&!o(z,e))&&(!(t||!o(this,e)||!o(R,e)||o(this,N)&&this[N][e])||t)},$=function(e,t){if(e=b(e),t=x(t,!0),e!==W||!o(R,t)||o(z,t)){var n=P(e,t);return!n||!o(R,t)||o(e,N)&&e[N][t]||(n.enumerable=!0),n}},ee=function(e){for(var t,n=A(b(e)),r=[],i=0;n.length>i;)o(R,t=n[i++])||t==N||t==c||r.push(t);return r},te=function(e){for(var t,n=e===W,r=A(n?z:b(e)),i=[],l=0;r.length>l;)!o(R,t=r[l++])||n&&!o(W,t)||i.push(R[t]);return i};Z||(L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(n){this===W&&t.call(z,n),o(this,N)&&o(this[N],e)&&(this[N][e]=!1),U(this,e,C(1,n))};return i&&G&&U(W,e,{configurable:!0,set:t}),q(e)},a(L.prototype,"toString",function(){return this._k}),M.f=$,O.f=Y,n(57).f=k.f=ee,n(30).f=X,S.f=te,i&&!n(20)&&a(W,"propertyIsEnumerable",X,!0),d.f=function(e){return q(m(e))}),l(l.G+l.W+l.F*!Z,{Symbol:L});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;ne.length>re;)m(ne[re++]);for(var oe=H(m.store),ie=0;oe.length>ie;)h(oe[ie++]);l(l.S+l.F*!Z,"Symbol",{for:function(e){return o(V,e+="")?V[e]:V[e]=L(e)},keyFor:function(e){if(!J(e))throw TypeError(e+" is not a symbol!");for(var t in V)if(V[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),l(l.S+l.F*!Z,"Object",{create:Q,defineProperty:Y,defineProperties:K,getOwnPropertyDescriptor:$,getOwnPropertyNames:ee,getOwnPropertySymbols:te});var le=u(function(){S.f(1)});l(l.S+l.F*le,"Object",{getOwnPropertySymbols:function(e){return S.f(y(e))}}),B&&l(l.S+l.F*(!Z||u(function(){var e=L();return"[null]"!=j([e])||"{}"!=j({a:e})||"{}"!=j(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(w(t)||void 0!==e)&&!J(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!J(t))return t}),r[1]=t,j.apply(B,r)}}),L.prototype[F]||n(16)(L.prototype,F,L.prototype.valueOf),p(L,"Symbol"),p(Math,"Math",!0),p(r.JSON,"JSON",!0)},function(e,t,n){var r=n(26)("meta"),o=n(14),i=n(15),l=n(13).f,a=0,c=Object.isExtensible||function(){return!0},u=!n(17)(function(){return c(Object.preventExtensions({}))}),s=function(e){l(e,r,{value:{i:"O"+ ++a,w:{}}})},p=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!c(e))return"F";if(!t)return"E";s(e)}return e[r].i},f=function(e,t){if(!i(e,r)){if(!c(e))return!0;if(!t)return!1;s(e)}return e[r].w},m=function(e){return u&&d.NEED&&c(e)&&!i(e,r)&&s(e),e},d=e.exports={KEY:r,NEED:!1,fastKey:p,getWeak:f,onFreeze:m}},function(e,t,n){var r=n(23),o=n(42),i=n(30);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var l,a=n(e),c=i.f,u=0;a.length>u;)c.call(e,l=a[u++])&&t.push(l);return t}},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(18),o=n(57).f,i={}.toString,l="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(e){try{return o(e)}catch(e){return l.slice()}};e.exports.f=function(e){return l&&"[object Window]"==i.call(e)?a(e):o(r(e))}},function(e,t,n){n(41)("asyncIterator")},function(e,t,n){n(41)("observable")},function(e,t,n){e.exports={default:n(97),__esModule:!0}},function(e,t,n){n(98),e.exports=n(5).Object.setPrototypeOf},function(e,t,n){var r=n(9);r(r.S,"Object",{setPrototypeOf:n(99).set})},function(e,t,n){var r=n(14),o=n(10),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{r=n(21)(Function.call,n(58).f(Object.prototype,"__proto__").set,2),r(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){e.exports={default:n(101),__esModule:!0}},function(e,t,n){n(102);var r=n(5).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(9);r(r.S,"Object",{create:n(38)})},function(e,t,n){e.exports={default:n(104),__esModule:!0}},function(e,t,n){n(105),e.exports=n(5).Object.assign},function(e,t,n){var r=n(9);r(r.S+r.F,"Object",{assign:n(106)})},function(e,t,n){"use strict";var r=n(11),o=n(23),i=n(42),l=n(30),a=n(19),c=n(53),u=Object.assign;e.exports=!u||n(17)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=u({},e)[n]||Object.keys(u({},t)).join("")!=r})?function(e,t){for(var n=a(e),u=arguments.length,s=1,p=i.f,f=l.f;u>s;)for(var m,d=c(arguments[s++]),h=p?o(d).concat(p(d)):o(d),v=h.length,g=0;v>g;)m=h[g++],r&&!f.call(d,m)||(n[m]=d[m]);return n}:u},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(108),d=n(109),h=n(110),v=(n.n(h),wp.i18n.__),g=wp.element.Component,_=wp.components.PanelBody,w=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){return wp.element.createElement(_,{className:"pixelgrade-hero-button-group-wrapper",title:v("Layout","__plugin_txtd"),initialOpen:!0},wp.element.createElement(m.a,this.props),wp.element.createElement(d.a,this.props),this.props.children)}}]),t}(g);t.a=w},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=wp.i18n.__,d=wp.element,h=d.Component,v=d.Fragment,g=wp.components,_=g.Button,w=g.ButtonGroup,y=g.RangeControl,b=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.contentPadding,r=t.contentPaddingCustom,o=e.setAttributes,i=[{label:m("Small","__plugin_txtd"),value:"small"},{label:m("Medium","__plugin_txtd"),value:"medium"},{label:m("Large","__plugin_txtd"),value:"large"},{label:m("Custom","__plugin_txtd"),value:"custom"}];return wp.element.createElement(v,null,wp.element.createElement("label",null,m("Content Padding","__plugin_txtd")),wp.element.createElement(w,null,i.map(function(e){return wp.element.createElement(_,{key:e.value,isDefault:e.value!==n,isPrimary:e.value===n,onClick:function(){o({contentPadding:e.value})}},e.label)})),"custom"===n&&wp.element.createElement(y,{value:r,onChange:function(e){return o({contentPaddingCustom:e})},min:0,max:25}))}}]),t}(h);t.a=b},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=wp.i18n.__,d=wp.element,h=d.Component,v=d.Fragment,g=wp.components,_=g.Button,w=g.ButtonGroup,y=g.RangeControl,b=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.contentWidth,r=t.contentWidthCustom,o=e.setAttributes,i=[{label:m("Full","__plugin_txtd"),value:"full"},{label:m("Large","__plugin_txtd"),value:"large"},{label:m("Narrow","__plugin_txtd"),value:"narrow"},{label:m("Custom","__plugin_txtd"),value:"custom"}];return wp.element.createElement(v,null,wp.element.createElement("label",null,m("Content Width","__plugin_txtd")),wp.element.createElement(w,{label:"Content Width"},i.map(function(e){return wp.element.createElement(_,{isDefault:e.value!==n,isPrimary:e.value===n,onClick:function(){o({contentWidth:e.value})}},e.label)})),"custom"===n&&wp.element.createElement(y,{value:r,onChange:function(e){return o({contentWidthCustom:e})},min:20,max:90,step:10}))}}]),t}(h);t.a=b},function(e,t){},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=wp.i18n.__,d=wp.element,h=d.Component,v=(d.Fragment,wp.components),g=v.PanelBody,_=v.RangeControl,w=v.RadioControl,y=v.ToggleControl,b=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.enableParallax,r=t.parallaxAmount,o=t.parallaxCustomAmount,i=e.setAttributes;return wp.element.createElement(g,{title:m("Parallax","__plugin_txtd"),initialOpen:!1},wp.element.createElement(y,{label:m("Enable Parallax Scrolling","__plugin_txtd"),checked:n,onChange:function(){return i({enableParallax:!n})}}),!!n&&wp.element.createElement(w,{label:m("Parallax Orbital Speed","__plugin_txtd"),selected:r,onChange:function(e){i("custom"===e?{parallaxAmount:e}:{parallaxAmount:e,parallaxCustomAmount:parseInt(e,10)})},options:[{label:m("Fast as Mercure","__plugin_txtd"),value:"20"},{label:m("Natural as Earth","__plugin_txtd"),value:"50"},{label:m("Slow as Neptune","__plugin_txtd"),value:"70"},{label:m("Custom","__plugin_txtd"),value:"custom"}],help:m("The speed at which the parallax effect runs.","__plugin_txtd")}),!!n&&"custom"===r&&wp.element.createElement(_,{value:o,onChange:function(e){return i({parallaxCustomAmount:e})},min:10,max:100,step:10,help:m("It starts from 0 when the image will keep with the content (no parallax) up to 100 when the image appears fixed in place.","__plugin_txtd")}))}}]),t}(h);t.a=b},function(e,t,n){"use strict";n.d(t,"a",function(){return E}),n.d(t,"b",function(){return k});var r=n(43),o=n.n(r),i=n(12),l=n.n(i),a=n(0),c=n.n(a),u=n(1),s=n.n(u),p=n(2),f=n.n(p),m=n(3),d=n.n(m),h=n(4),v=n.n(h),g=wp.i18n.__,_=wp.element,w=_.Component,y=(_.Fragment,wp.components),b=(y.Button,y.IconButton,y.FormFileUpload,y.SelectControl,wp.blockEditor),x=(b.MediaUpload,b.MediaPlaceholder),C=["image"],E=function(e){function t(){return s()(this,t),d()(this,(t.__proto__||c()(t)).apply(this,arguments))}return v()(t,e),f()(t,[{key:"onChangeGallery",value:function(e){var t=this,n=e.map(function(t,n){return wp.apiRequest({path:"/wp/v2/media/"+t.id}).then(function(r){e[n]=l()({},r,t)})});o.a.all(n).then(function(){t.props.setAttributes({galleryImages:e.filter(function(e){return!!(e.id&&e.sizes&&e.sizes.large&&e.sizes.large.url)})})})}},{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.galleryImages,r=(t.selected,t.onSelectImage,t.onChange,e.setAttributes,!!n.length);return wp.element.createElement(x,{addToGallery:r,className:"",labels:{title:"",instructions:g("Drag images, upload new ones or select files from your library.","__plugin_txtd")},onSelect:this.onChangeGallery.bind(this),accept:"image/*",allowedTypes:C,multiple:!0,value:r?n:void 0})}}]),t}(w),k=function(e){function t(){return s()(this,t),d()(this,(t.__proto__||c()(t)).apply(this,arguments))}return v()(t,e),f()(t,[{key:"render",value:function(){var e=this.props,t=e.galleryImages,n=e.selected,r=e.onSelectImage;e.isSelected;return wp.element.createElement("ul",{class:"nova-slideshow__gallery-edit"},t.map(function(e,t){var o=["nova-slideshow__gallery-item"];return n===t&&o.push("nova-slideshow__gallery-item--active"),wp.element.createElement("li",{key:e.id||e.url,onClick:function(){r(t)}},wp.element.createElement("div",{className:o.join(" ")},wp.element.createElement("img",{src:e.sizes.thumbnail.url,alt:""})))}))}}]),t}(w)},function(e,t,n){n(59),n(49),n(56),n(114),n(126),n(127),e.exports=n(5).Promise},function(e,t,n){"use strict";var r,o,i,l,a=n(20),c=n(6),u=n(21),s=n(60),p=n(9),f=n(14),m=n(27),d=n(115),h=n(116),v=n(61),g=n(62).set,_=n(121)(),w=n(44),y=n(63),b=n(122),x=n(64),C=c.TypeError,E=c.process,k=E&&E.versions,M=k&&k.v8||"",S=c.Promise,O="process"==s(E),H=function(){},P=o=w.f,I=!!function(){try{var e=S.resolve(1),t=(e.constructor={})[n(7)("species")]=function(e){e(H,H)};return(O||"function"==typeof PromiseRejectionEvent)&&e.then(H)instanceof t&&0!==M.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(e){}}(),A=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},L=function(e,t){if(!e._n){e._n=!0;var n=e._c;_(function(){for(var r=e._v,o=1==e._s,i=0;n.length>i;)!function(t){var n,i,l,a=o?t.ok:t.fail,c=t.resolve,u=t.reject,s=t.domain;try{a?(o||(2==e._h&&N(e),e._h=1),!0===a?n=r:(s&&s.enter(),n=a(r),s&&(s.exit(),l=!0)),n===t.promise?u(C("Promise-chain cycle")):(i=A(n))?i.call(n,c,u):c(n)):u(r)}catch(e){s&&!l&&s.exit(),u(e)}}(n[i++]);e._c=[],e._n=!1,t&&!e._h&&B(e)})}},B=function(e){g.call(c,function(){var t,n,r,o=e._v,i=j(e);if(i&&(t=y(function(){O?E.emit("unhandledRejection",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=O||j(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},j=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(e){g.call(c,function(){var t;O?E.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},F=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),L(t,!0))},T=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw C("Promise can't be resolved itself");(t=A(e))?_(function(){var r={_w:n,_d:!1};try{t.call(e,u(T,r,1),u(F,r,1))}catch(e){F.call(r,e)}}):(n._v=e,n._s=1,L(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};I||(S=function(e){d(this,S,"Promise","_h"),m(e),r.call(this);try{e(u(T,this,1),u(F,this,1))}catch(e){F.call(this,e)}},r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=n(123)(S.prototype,{then:function(e,t){var n=P(v(this,S));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=O?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&L(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=u(T,e,1),this.reject=u(F,e,1)},w.f=P=function(e){return e===S||e===l?new i(e):o(e)}),p(p.G+p.W+p.F*!I,{Promise:S}),n(29)(S,"Promise"),n(124)("Promise"),l=n(5).Promise,p(p.S+p.F*!I,"Promise",{reject:function(e){var t=P(this);return(0,t.reject)(e),t.promise}}),p(p.S+p.F*(a||!I),"Promise",{resolve:function(e){return x(a&&this===l?S:this,e)}}),p(p.S+p.F*!(I&&n(125)(function(e){S.all(e).catch(H)})),"Promise",{all:function(e){var t=this,n=P(t),r=n.resolve,o=n.reject,i=y(function(){var n=[],i=0,l=1;h(e,!1,function(e){var a=i++,c=!1;n.push(void 0),l++,t.resolve(e).then(function(e){c||(c=!0,n[a]=e,--l||r(n))},o)}),--l||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=P(t),r=n.reject,o=y(function(){h(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(21),o=n(117),i=n(118),l=n(10),a=n(54),c=n(119),u={},s={},t=e.exports=function(e,t,n,p,f){var m,d,h,v,g=f?function(){return e}:c(e),_=r(n,p,t?2:1),w=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(i(g)){for(m=a(e.length);m>w;w++)if((v=t?_(l(d=e[w])[0],d[1]):_(e[w]))===u||v===s)return v}else for(h=g.call(e);!(d=h.next()).done;)if((v=o(h,_,d.value,t))===u||v===s)return v};t.BREAK=u,t.RETURN=s},function(e,t,n){var r=n(10);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(22),o=n(7)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(60),o=n(7)("iterator"),i=n(22);e.exports=n(5).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(6),o=n(62).set,i=r.MutationObserver||r.WebKitMutationObserver,l=r.process,a=r.Promise,c="process"==n(24)(l);e.exports=function(){var e,t,n,u=function(){var r,o;for(c&&(r=l.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(c)n=function(){l.nextTick(u)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);n=function(){s.then(u)}}else n=function(){o.call(r,u)};else{var p=!0,f=document.createTextNode("");new i(u).observe(f,{characterData:!0}),n=function(){f.data=p=!p}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r=n(6),o=r.navigator;e.exports=o&&o.userAgent||""},function(e,t,n){var r=n(16);e.exports=function(e,t,n){for(var o in t)n&&e[o]?e[o]=t[o]:r(e,o,t[o]);return e}},function(e,t,n){"use strict";var r=n(6),o=n(5),i=n(13),l=n(11),a=n(7)("species");e.exports=function(e){var t="function"==typeof o[e]?o[e]:r[e];l&&t&&!t[a]&&i.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(7)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],l=i[r]();l.next=function(){return{done:n=!0}},i[r]=function(){return l},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(9),o=n(5),i=n(6),l=n(61),a=n(64);r(r.P+r.R,"Promise",{finally:function(e){var t=l(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return a(t,e()).then(function(){return n})}:e,n?function(n){return a(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(9),o=n(44),i=n(63);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){"use strict";n.d(t,"a",function(){return P});var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(129),d=(n.n(m),n(8)),h=(n(25),wp.i18n.__),v=wp.element,g=v.Component,_=v.Fragment,w=wp.components,y=w.ColorPalette,b=w.Dropdown,x=w.IconButton,C=w.RadioControl,E=w.RangeControl,k=(w.SelectControl,w.Toolbar),M=wp.blockEditor.PanelColorSettings,S=[{name:h("Dark","__plugin_txtd"),color:"#000"},{name:h("Light","__plugin_txtd"),color:"#FFF"}],O=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.overlayFilterStyle,r=t.overlayFilterStrength,o=e.setAttributes;return wp.element.createElement(_,null,wp.element.createElement(C,{label:h("Overlay Filter Style","__plugin_txtd"),selected:n,options:[{label:h("None","__plugin_txtd"),value:"none"},{label:h("Dark","__plugin_txtd"),value:"dark"},{label:h("Light","__plugin_txtd"),value:"light"}],onChange:function(e){return o({overlayFilterStyle:e})}}),"none"!==n&&wp.element.createElement(E,{label:h("Overlay Filter Strength","__plugin_txtd"),value:r,onChange:function(e){return o({overlayFilterStrength:e})},min:0,max:100,step:10}))}}]),t}(g),H=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes.contentColor,n=e.setAttributes;return wp.element.createElement(y,{className:"nova-hide-clear-color",value:t,colors:S,onChange:function(e){return n({contentColor:e})},disableCustomColors:!0})}}]),t}(g),P=(function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes.contentColor,n=e.setAttributes;return wp.element.createElement(M,{className:"nova-hide-clear-color",title:h("Color Settings","__plugin_txtd"),colorSettings:[{value:t,onChange:function(e){return n({contentColor:e})},label:h("Content Color","__plugin_txtd")}],colors:S,initialOpen:!1},wp.element.createElement(O,this.props))}}])}(g),function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this;return wp.element.createElement(k,{className:"pixelgrade-hero-block-toolbar"},wp.element.createElement(b,{position:"bottom",className:"pixelgrade-hero-block-toolbar-dropdown",contentClassName:"components-nova--popover",renderToggle:function(e){var t=e.isOpen,n=e.onToggle;return wp.element.createElement(x,{onClick:n,icon:d.f,"aria-expanded":t,label:h("Color Options","__plugin_txtd"),labelPosition:"bottom"})},focusOnMount:!1,renderContent:function(t){t.onClose;return wp.element.createElement(_,null,wp.element.createElement(H,e.props),wp.element.createElement(O,e.props))}}))}}]),t}(g))},function(e,t){},function(e,t){},function(e,t,n){"use strict";function r(e){function t(e){return function(){return o(r===e?void 0:e)}}var n=e.isCollapsed,r=e.value,o=e.onChange,l=e.controls,a=void 0===l?_:l,u=g[r],s=g[w];return wp.element.createElement(c,{isCollapsed:n,icon:u?u.icon:s.icon,controls:a.map(function(e){return i()({},g[e],{isActive:r===e,onClick:t(e),className:"pixelgrade-hero-horizontal-alignment-button"})})})}var o=n(12),i=n.n(o),l=n(8),a=wp.i18n.__,c=wp.components.Toolbar,u=wp.viewport.withViewportMatch,s=wp.data.withSelect,p=wp.compose,f=p.compose,m=p.createHigherOrderComponent,d=wp.element.createContext,h=d({name:"",isSelected:!1,focusedElement:null,setFocusedElement:function(){},clientId:null}),v=h.Consumer,g=(h.Provider,{left:{icon:l.c,title:a("Align Left","__plugin_txtd")},center:{icon:l.b,title:a("Align Middle","__plugin_txtd")},right:{icon:l.a,title:a("Align Right","__plugin_txtd")}}),_=["left","center","right"],w="center";t.a=f(function(e){return m(function(t){return function(n){return wp.element.createElement(v,null,function(r){return wp.element.createElement(t,i()({},n,e(r,n)))})}},"withBlockEditContext")}(function(e){return{clientId:e.clientId}}),u({isLargeViewport:"medium"}),s(function(e,t){var n=t.clientId,r=t.isLargeViewport,o=t.isCollapsed,i=e("core/block-editor"),l=i.getBlockRootClientId,a=i.getSettings;return{isCollapsed:o||!r||!a().hasFixedToolbar&&l(n)}}))(r)},function(e,t,n){"use strict";function r(e){function t(e){return function(){return o(r===e?void 0:e)}}var n=e.isCollapsed,r=e.value,o=e.onChange,l=e.controls,u=void 0===l?_:l,s=g[r],p=g[w];return wp.element.createElement(c,{isCollapsed:n,icon:s?s.icon:p.icon,label:a("Change Alignment","Block vertical alignment setting label"),controls:u.map(function(e){return i()({},g[e],{isActive:r===e,onClick:t(e)})})})}var o=n(12),i=n.n(o),l=n(8),a=wp.i18n._x,c=wp.components.Toolbar,u=wp.viewport.withViewportMatch,s=wp.data.withSelect,p=wp.compose,f=p.compose,m=p.createHigherOrderComponent,d=wp.element.createContext,h=d({name:"",isSelected:!1,focusedElement:null,setFocusedElement:function(){},clientId:null}),v=h.Consumer,g=(h.Provider,{top:{icon:l.c,title:a("Vertically Align Top","Block vertical alignment setting")},center:{icon:l.b,title:a("Vertically Align Middle","Block vertical alignment setting")},bottom:{icon:l.a,title:a("Vertically Align Bottom","Block vertical alignment setting")}}),_=["top","center","bottom"],w="top";t.a=f(function(e){return m(function(t){return function(n){return wp.element.createElement(v,null,function(r){return wp.element.createElement(t,i()({},n,e(r,n)))})}},"withBlockEditContext")}(function(e){return{clientId:e.clientId}}),u({isLargeViewport:"medium"}),s(function(e,t){var n=t.clientId,r=t.isLargeViewport,o=t.isCollapsed,i=e("core/block-editor"),l=i.getBlockRootClientId,a=i.getSettings;return{isCollapsed:o||!r||!a().hasFixedToolbar&&l(n)}}))(r)},function(e,t,n){"use strict";n.d(t,"a",function(){return O}),n.d(t,"b",function(){return H});var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(12),d=n.n(m),h=n(31),v=wp.i18n.__,g=wp.element.Component,_=wp.components,w=_.PanelBody,y=_.RadioControl,b=_.ToggleControl,x=wp.data,C=x.dispatch,E=x.select,k=x.subscribe,M=E("core/block-editor").getBlocks();k(Object(h.a)(function(){var e=E("core/block-editor").getBlocks(),t=M.length!==e.length;t||(t=M.some(function(t,n){return M[n].clientId!==e[n].clientId})),t&&(M=e,S())},30));var S=function(e){E("core/block-editor").getBlocks().filter(function(e){return"novablocks/hero"===e.name}).filter(function(t,n){var r=d()({},t.attributes,e),o=r.applyMinimumHeight,i=r.scrollIndicator,l="first"===o&&0===n||"all"===o,a=!0===i&&0===n;return C("core/block-editor").updateBlockAttributes(t.clientId,{applyMinimumHeightBlock:l,scrollIndicatorBlock:a}),!0})},O=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=e.setAttributes,r=t.applyMinimumHeight?t.applyMinimumHeight:"first",o=t.minHeight?t.minHeight:75;return wp.element.createElement(w,{title:v("Height","__plugin_txtd"),initialOpen:!1},wp.element.createElement(y,{label:v("Apply Minimum Height","__plugin_txtd"),selected:r,onChange:function(e){n({applyMinimumHeight:e}),S({applyMinimumHeight:e})},options:[{label:v("None","__plugin_txtd"),value:"none"},{label:v("First Hero Block Only","__plugin_txtd"),value:"first"},{label:v("All Hero Blocks","__plugin_txtd"),value:"all"}]}),"none"!==r&&wp.element.createElement(y,{label:v("Minimum Height","__plugin_txtd"),selected:o,onChange:function(e){n({minHeight:parseInt(e,10)})},options:[{label:v("Half","__plugin_txtd"),value:50},{label:v("Two Thirds","__plugin_txtd"),value:66},{label:v("Three Quarters","__plugin_txtd"),value:75},{label:v("Full","__plugin_txtd"),value:100}]}))}}]),t}(g),H=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes.scrollIndicator,n=e.setAttributes,r=E("core/block-editor").getBlocks().filter(function(e){return"novablocks/hero"===e.name}),o=r.findIndex(function(e){return e.clientId===E("core/block-editor").getSelectedBlockClientId()});return wp.element.createElement(w,{title:v("Scroll Indicator","__plugin_txtd"),style:{display:0===o?"block":"none"},initialOpen:!1},wp.element.createElement(b,{label:v("Enable Scroll Indicator","__plugin_txtd"),checked:t,onChange:function(e){n({scrollIndicator:e}),S({scrollIndicator:e})}}))}}]),t}(g)},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(135),d=wp.element.Component,h=wp.blockEditor.InnerBlocks,v=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=t.contentPadding,r=t.contentPaddingCustom,o=t.contentWidth,i=t.contentWidthCustom,l=t.verticalAlignment,a=t.horizontalAlignment,c=t.minHeight,u=t.applyMinimumHeightBlock,s=t.scrollIndicatorBlock,p=t.contentColor,f=t.overlayFilterStyle,d=e.className,v=[d,"nova-hero","nova-u-valign-"+l,"nova-u-halign-"+a,"nova-u-spacing-"+n,"nova-u-content-width-"+o,"nova-u-background","nova-u-background-"+f],g={hero:{color:p},foreground:{},content:{}};return u&&(g.hero.minHeight=c+"vh"),"custom"===n&&(g.foreground.paddingTop=r+"%",g.foreground.paddingBottom=r+"%"),"custom"===o&&(g.content.maxWidth=i+"%"),wp.element.createElement("div",{className:v.join(" "),style:g.hero},wp.element.createElement(m.a,this.props),wp.element.createElement("div",{className:"nova-hero__foreground nova-u-content-padding",style:g.foreground},wp.element.createElement("div",{className:"nova-u-content-align"},wp.element.createElement("div",{className:"nova-hero__inner-container nova-u-content-width",style:g.content},wp.element.createElement(h,{template:[["core/heading",{content:"This is a catchy title",align:"center",level:1}],["core/paragraph",{content:"A brilliant subtitle to explain its catchiness",align:"center"}],["core/button",{text:"Discover more",align:"center"}]]})),s&&wp.element.createElement("div",{className:"nova-hero__indicator"}))))}}]),t}(d);t.a=v},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(66),d=wp.element.Component,h=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props.attributes,t=e.overlayFilterStyle,n=e.overlayFilterStrength,r=e.media,o={opacity:1};return"none"!==t&&(o.opacity=1-n/100),wp.element.createElement("div",{className:"nova-hero__background",style:this.props.style},"image"===r.type&&void 0!==r.sizes&&wp.element.createElement("img",{className:"nova-hero__media",src:r.sizes.full.url,style:o}),"video"===r.type&&wp.element.createElement("video",{muted:!0,autoPlay:!0,loop:!0,className:"nova-hero__media",src:r.url,style:o}))}}]),t}(d);t.a=Object(m.a)(h)},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(8),d=n(25),h=wp.i18n.__,v=wp.element,g=v.Component,_=(v.Fragment,wp.blockEditor),w=_.BlockControls,y=_.MediaUpload,b=wp.components,x=(b.Dropdown,b.IconButton),C=b.Toolbar,E=["image","video"],k=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props.setAttributes;return wp.element.createElement(w,null,wp.element.createElement(d.a,this.props),wp.element.createElement(d.b,this.props),wp.element.createElement(C,null,wp.element.createElement(y,{allowedTypes:E,onSelect:function(t){return e({media:t})},render:function(e){var t=e.open;return wp.element.createElement(x,{className:"components-icon-button components-toolbar__control",label:h("Change Media","__plugin_txtd"),icon:m.i,onClick:t})}})))}}]),t}(g);t.a=k},function(e,t,n){"use strict";var r=n(8),o=n(138),i=wp.i18n.__,l=wp.blocks.registerBlockType,a=wp.blockEditor.InnerBlocks;l("novablocks/media",{title:i("Media Card Constellation","__plugin_txtd"),description:i("Display media objects alongside short pieces of content.","__plugin_txtd"),category:"nova-blocks",icon:r.g,edit:o.a,save:function(){return wp.element.createElement(a.Content,null)},getEditWrapperProps:function(){return wp.data.select("core/block-editor").getSettings().alignWide?{"data-align":"full"}:{}}})},function(e,t,n){"use strict";var r=n(12),o=n.n(r),i=n(139),l=n.n(i),a=n(0),c=n.n(a),u=n(1),s=n.n(u),p=n(2),f=n.n(p),m=n(3),d=n.n(m),h=n(4),v=n.n(h),g=n(141),_=n(145),w=n(146),y=wp.element,b=y.Component,x=y.Fragment,C=function(e){function t(){return s()(this,t),d()(this,(t.__proto__||c()(t)).apply(this,arguments))}return v()(t,e),f()(t,[{key:"updateImages",value:function(e){this.props.setAttributes({images:e.map(function(e){return l()({id:e.id,url:e.url,alt:e.alt})})})}},{key:"render",value:function(){return[wp.element.createElement(x,null,wp.element.createElement(w.a,o()({},this.props,{updateImages:this.updateImages.bind(this)})),wp.element.createElement(g.a,o()({},this.props,{updateImages:this.updateImages.bind(this)})),wp.element.createElement(_.a,this.props))]}}]),t}(b);t.a=C},function(e,t,n){e.exports={default:n(140),__esModule:!0}},function(e,t,n){var r=n(5),o=r.JSON||(r.JSON={stringify:JSON.stringify});e.exports=function(e){return o.stringify.apply(o,arguments)}},function(e,t,n){"use strict";var r=n(142),o=n.n(r),i=n(43),l=n.n(i),a=n(12),c=n.n(a),u=n(0),s=n.n(u),p=n(1),f=n.n(p),m=n(2),d=n.n(m),h=n(3),v=n.n(h),g=n(4),_=n.n(g),w=n(8),y=n(65),b=wp.i18n.__,x=wp.element,C=x.Component,E=(x.Fragment,wp.blockEditor),k=E.MediaUpload,M=E.BlockControls,S=wp.components,O=S.IconButton,H=S.Toolbar,P=function(e){function t(e){return f()(this,t),v()(this,(t.__proto__||s()(t)).apply(this,arguments))}return _()(t,e),d()(t,[{key:"onChangeGallery",value:function(e){var t=this,n=e.map(function(t,n){return wp.apiRequest({path:"/wp/v2/media/"+t.id}).then(function(r){e[n]=c()({},r,t)})});l.a.all(n).then(function(){t.props.setAttributes({galleryImages:e.filter(function(e){return!!(e.id&&e.sizes&&e.sizes.large&&e.sizes.large.url)})})})}},{key:"render",value:function(){var e=this.props,t=e.attributes,n=e.setAttributes,r=e.updateImages,i=t.mediaPosition,l=t.images,a=void 0===l?[]:l,u=a.map(function(e){return JSON.parse(e)}),s=!!a.length,p={left:{icon:"align-pull-left",title:b("Show Media on Left Side","__plugin_txtd")},right:{icon:"align-pull-right",title:b("Show Media on Right Side","__plugin_txtd")}};return wp.element.createElement(M,null,wp.element.createElement(H,{controls:o()(p).map(function(e){return c()({},p[e],{onClick:function(){n({mediaPosition:e})},isActive:i===e})})}),wp.element.createElement(y.a,this.props),s&&wp.element.createElement(H,null,wp.element.createElement(k,{type:"image",multiple:!0,gallery:!0,value:u.map(function(e){return e.id}),onSelect:r,render:function(e){var t=e.open;return wp.element.createElement(O,{className:"components-icon-button components-toolbar__control",label:b("Change Media","__plugin_txtd"),icon:w.i,onClick:function(){t()}})}})))}}]),t}(C);t.a=P},function(e,t,n){e.exports={default:n(143),__esModule:!0}},function(e,t,n){n(144),e.exports=n(5).Object.keys},function(e,t,n){var r=n(19),o=n(23);n(46)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=wp.i18n.__,d=wp.element,h=d.Component,v=d.Fragment,g=wp.blockEditor.InspectorControls,_=wp.components,w=_.PanelBody,y=_.RadioControl,b=function(e){function t(e){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=e.setAttributes,r=t.contentStyle,o=t.blockStyle;return wp.element.createElement(v,null,wp.element.createElement(g,null,wp.element.createElement(w,{title:m("Content Area","__plugin_txtd"),initialOpen:!0},wp.element.createElement(y,{label:m("Emphasis Level","__plugin_txtd"),value:r,selected:r,options:[{label:m("Basic","__plugin_txtd"),value:"basic"},{label:m("Moderate","__plugin_txtd"),value:"moderate"},{label:m("Highlighted","__plugin_txtd"),value:"highlighted"}],onChange:function(e){return n({contentStyle:e})}})),wp.element.createElement(w,{title:m("Block Area","__plugin_txtd"),initialOpen:!0},wp.element.createElement(y,{label:m("Emphasis Level","__plugin_txtd"),value:o,selected:o,options:[{label:m("Basic","__plugin_txtd"),value:"basic"},{label:m("Moderate","__plugin_txtd"),value:"moderate"},{label:m("Highlighted","__plugin_txtd"),value:"highlighted"}],onChange:function(e){return n({blockStyle:e})}}))))}}]),t}(h);t.a=b},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(147),d=n.n(m),h=wp.element.Component,v=wp.blockEditor,g=v.InnerBlocks,_=v.MediaPlaceholder,w=["core/button","core/paragraph","core/heading"],y=[["core/heading",{content:"Shoot for the moon, Even if You Miss it",level:4}],["core/heading",{content:"Welcome to our planet, look and feel matters!",level:2}],["core/paragraph",{content:"We've always defined ourselves by the ability to overcome the impossible. And we count these moments. These moments when we dare to aim higher, to break barriers, to reach for the stars, to make the unknown known."}],["core/button",{text:"Discover More"}]],b=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.attributes,n=e.className,r=e.updateImages,o=t.contentStyle,i=t.blockStyle,l=t.mediaPosition,a=t.images,c=d()(n,"nova-media","has-image-on-the-"+l,"block-is-"+i,"content-is-"+o),u=a.map(function(e){return JSON.parse(e)});return wp.element.createElement("div",{className:c},wp.element.createElement("div",{className:"nova-media__inner-container"},wp.element.createElement("div",{className:"wp-block","data-align":"wide"},wp.element.createElement("div",{className:"nova-media__layout"},wp.element.createElement("div",{className:"nova-media__content nova-media__inner-container"},wp.element.createElement(g,{allowedBlocks:w,template:y})),wp.element.createElement("div",{className:"nova-media__aside"},function(e){return 0===e.length?wp.element.createElement(_,{icon:"format-gallery",className:"nova-media__placeholder",onSelect:r,accept:"image/*",allowedTypes:["image"],multiple:!0}):u.map(function(e){return wp.element.createElement("div",{className:"nova-media__image"},wp.element.createElement("img",{alt:e.alt,src:e.url}))})}(a))))))}}]),t}(h);t.a=b},function(e,t,n){var r,o;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";function n(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var l=n.apply(null,r);l&&e.push(l)}else if("object"===o)for(var a in r)i.call(r,a)&&r[a]&&e.push(a)}}return e.join(" ")}var i={}.hasOwnProperty;void 0!==e&&e.exports?(n.default=n,e.exports=n):(r=[],void 0!==(o=function(){return n}.apply(t,r))&&(e.exports=o))}()},function(e,t,n){"use strict";var r=n(8),o=n(149),i=wp.i18n.__,l=wp.blocks.registerBlockType,a=wp.blockEditor.InnerBlocks;l("novablocks/slideshow",{title:i("Slideshow Me the Way","__plugin_txtd"),description:i("Display more than one piece of content in a single, coveted space.","__plugin_txtd"),category:"nova-blocks",icon:r.h,edit:o.a,save:function(){return wp.element.createElement(a.Content,null)},getEditWrapperProps:function(){return wp.data.select("core/block-editor").getSettings().alignWide?{"data-align":"full"}:{}}})},function(e,t,n){"use strict";var r=n(43),o=n.n(r),i=n(12),l=n.n(i),a=n(0),c=n.n(a),u=n(1),s=n.n(u),p=n(2),f=n.n(p),m=n(3),d=n.n(m),h=n(4),v=n.n(h),g=n(8),_=n(25),w=n(150),y=n(151),b=wp.i18n.__,x=wp.blockEditor,C=x.MediaUpload,E=x.BlockControls,k=x.InspectorControls,M=wp.components,S=M.PanelBody,O=M.RadioControl,H=(M.SelectControl,M.IconButton),P=M.Toolbar,I=wp.element,A=I.Component,L=I.Fragment,B=[{url:"https://source.unsplash.com/_nqApgG-QrY/1600x900",id:-1,sizes:{thumbnail:{url:"https://source.unsplash.com/_nqApgG-QrY/150x150"},large:{url:"https://source.unsplash.com/_nqApgG-QrY/1600x900",width:1600,height:900}}},{url:"https://source.unsplash.com/Gt_4iMB7hY0/1600x900",alt:"This is a catchy image title",caption:"A brilliant caption to explain its catchiness",id:-2,sizes:{thumbnail:{url:"https://source.unsplash.com/Gt_4iMB7hY0/150x150"},large:{url:"https://source.unsplash.com/Gt_4iMB7hY0/1600x900",width:1600,height:900}}},{url:"https://source.unsplash.com/1vKTnwLMdqs/1600x900",id:-3,sizes:{thumbnail:{url:"https://source.unsplash.com/1vKTnwLMdqs/150x150"},large:{url:"https://source.unsplash.com/1vKTnwLMdqs/1600x900",width:1600,height:900}}}],j=function(e){function t(){s()(this,t);var e=d()(this,(t.__proto__||c()(t)).apply(this,arguments));return e.state={selectedIndex:0},e}return v()(t,e),f()(t,[{key:"componentWillMount",value:function(){var e=this.props,t=e.attributes.galleryImages,n=e.clientId;t.length||wp.data.dispatch("core/block-editor").updateBlockAttributes(n,{galleryImages:Object(w.a)(B.slice(0))})}},{key:"onChangeGallery",value:function(e){var t=this,n=e.map(function(t,n){return wp.apiRequest({path:"/wp/v2/media/"+t.id}).then(function(r){e[n]=l()({},r,t)})});o.a.all(n).then(function(){t.props.setAttributes({galleryImages:e.filter(function(e){return!!(e.id&&e.sizes&&e.sizes.large&&e.sizes.large.url)})})})}},{key:"onPrevArrowClick",value:function(){var e=this.props.attributes.galleryImages,t=this.state.selectedIndex,n=(t+e.length-1)%e.length;this.setState({selectedIndex:n})}},{key:"onNextArrowClick",value:function(){var e=this.props.attributes.galleryImages,t=this.state.selectedIndex,n=(t+1)%e.length;this.setState({selectedIndex:n})}},{key:"render",value:function(){var e=this,t=this.props,n=t.attributes,r=n.slideshowType,o=n.galleryImages,i=n.minHeight,a=t.setAttributes,c=t.isSelected,u=(t.className,this.onChangeGallery.bind(this)),s=this.state.selectedIndex;return s>=o.length&&(s=o.length-1),wp.element.createElement(L,null,wp.element.createElement(y.a,l()({},this.props,{previewImage:o[s],onPrevArrowClick:this.onPrevArrowClick.bind(this),onNextArrowClick:this.onNextArrowClick.bind(this)})),wp.element.createElement(k,null,wp.element.createElement(S,{className:"nova-blocks-slideshow-type-panel",title:b("Slides","__plugin_txtd")},!!o.length&&wp.element.createElement(_.d,{galleryImages:o,onSelectImage:function(t){e.setState({selectedIndex:t})},isSelected:c,selected:s})),"gallery"===r&&wp.element.createElement(L,null,wp.element.createElement(_.f,this.props),wp.element.createElement(S,{title:b("Height","__plugin_txtd"),initialOpen:!1},wp.element.createElement(O,{label:b("Minimum Height","__plugin_txtd"),selected:i,onChange:function(e){a({minHeight:parseInt(e,10)})},options:[{label:b("Auto","__plugin_txtd"),value:0},{label:b("Half","__plugin_txtd"),value:50},{label:b("Two Thirds","__plugin_txtd"),value:66},{label:b("Three Quarters","__plugin_txtd"),value:75},{label:b("Full Height","__plugin_txtd"),value:100}]})),wp.element.createElement(_.g,this.props)),"gallery"!==r&&wp.element.createElement(S,null,b("Coming Soon","__plugin_txtd"))),wp.element.createElement(E,null,wp.element.createElement(_.a,this.props),wp.element.createElement(_.b,this.props),wp.element.createElement(P,null,wp.element.createElement(C,{type:"image",multiple:!0,gallery:!0,value:o.map(function(e){return e.id}),onSelect:u,render:function(e){var t=e.open;return wp.element.createElement(H,{className:"components-icon-button components-toolbar__control",label:b("Change Media","__plugin_txtd"),icon:g.i,onClick:function(){t()}})}}))))}}]),t}(A);t.a=j},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(e){for(var t,n,r=e.length;0!==r;)n=Math.floor(Math.random()*r),r-=1,t=e[r],e[r]=e[n],e[n]=t;return e}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(25),d=n(152),h=wp.element,v=h.Component,g=h.Fragment,_=(wp.blockEditor.MediaUpload,function(e){function t(){l()(this,t);var e=s()(this,(t.__proto__||o()(t)).apply(this,arguments));return e.state={windowWidth:window.innerWidth,windowHeight:window.innerHeight},e}return f()(t,e),c()(t,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateDimensions.bind(this)),this.updateDimensions()}},{key:"updateDimensions",value:function(){this.setState({dimensions:{width:this.container.offsetWidth,height:this.container.offsetHeight}})}},{key:"renderContent",value:function(){var e=this,t=this.props,n=t.attributes,r=n.contentPadding,o=n.contentPaddingCustom,i=n.contentWidth,l=n.contentWidthCustom,a=n.applyMinimumHeightBlock,c=n.verticalAlignment,u=n.horizontalAlignment,s=n.contentColor,p=n.overlayFilterStyle,f=(n.overlayFilterStrength,n.galleryImages),h=t.previewImage,v=t.className,_=[v,"nova-slideshow is-ready","nova-u-valign-"+c,"nova-u-halign-"+u,"nova-u-spacing-"+r,"nova-u-content-width-"+i,"nova-u-background","nova-u-background-"+p],w={slideshow:{color:s},content:{},foreground:{}};"custom"===r&&(w.foreground.paddingTop=o+"%",w.foreground.paddingBottom=o+"%"),a&&(w.slideshow.minHeight=minHeight+"vh"),"custom"===i&&(w.content.maxWidth=l+"%");var y=0,b=0;return f.map(function(t){if(t.sizes&&t.sizes.large&&t.sizes.large.width){var n=t.sizes.large.width/t.sizes.large.height;y=n>y?n:y,b=e.state.dimensions.width/y}}),w.slider={minHeight:Math.max(b,y)+"px"},wp.element.createElement(g,null,!!f.length&&wp.element.createElement("div",{className:_.join(" "),style:w.slideshow},wp.element.createElement("div",{className:"nova-slideshow__slider",style:w.slider},wp.element.createElement("div",{className:"nova-slideshow__slide"},h&&wp.element.createElement(g,null,wp.element.createElement(d.a,this.props),wp.element.createElement("div",{className:"nova-slideshow__content nova-u-content-padding",style:w.foreground},wp.element.createElement("div",{className:"nova-u-content-align"},wp.element.createElement("div",{className:"nova-u-content-width",style:w.content},!!h.alt&&wp.element.createElement("h2",null,h.alt),!!h.caption&&wp.element.createElement("p",null,h.caption))))))),wp.element.createElement("div",{className:"nova-slideshow__controls"},wp.element.createElement("div",{className:"nova-slideshow__arrow nova-slideshow__arrow--prev nova-slideshow__arrow--disabled",onClick:this.props.onPrevArrowClick}),wp.element.createElement("div",{className:"nova-slideshow__arrow nova-slideshow__arrow--next nova-slideshow__arrow--disabled",onClick:this.props.onNextArrowClick}))),!f.length&&wp.element.createElement(g,null,wp.element.createElement(m.c,this.props),wp.element.createElement("div",{className:"nova-slideshow__controls"},wp.element.createElement("div",{className:"nova-slideshow__arrow nova-slideshow__arrow--prev nova-slideshow__arrow--disabled"}),wp.element.createElement("div",{className:"nova-slideshow__arrow nova-slideshow__arrow--next nova-slideshow__arrow--disabled"}))))}},{key:"render",value:function(){var e=this,t=this.state.dimensions;return wp.element.createElement("div",{ref:function(t){return e.container=t}},t&&this.renderContent())}}]),t}(v));t.a=_},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),l=n.n(i),a=n(2),c=n.n(a),u=n(3),s=n.n(u),p=n(4),f=n.n(p),m=n(66),d=wp.element.Component,h=function(e){function t(){return l()(this,t),s()(this,(t.__proto__||o()(t)).apply(this,arguments))}return f()(t,e),c()(t,[{key:"render",value:function(){var e=this.props.attributes,t=e.overlayFilterStyle,n=e.overlayFilterStrength,r={opacity:1};return"none"!==t&&(r.opacity=1-n/100),wp.element.createElement("div",{className:"nova-slideshow__background",style:this.props.style},wp.element.createElement("img",{className:"nova-slideshow__media",src:this.props.previewImage.sizes.large.url,alt:"",style:r}))}}]),t}(d);t.a=Object(m.a)(h)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,